!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
HLIST_HEAD	list.h	207;"	d
HLIST_HEAD_INIT	list.h	206;"	d
INIT_HLIST_HEAD	list.h	208;"	d
INIT_HLIST_NODE	list.h	209;"	d
INIT_LIST_HEAD	list.h	25;"	d
LISTSIZE	list.c	12;"	d	file:
LIST_HEAD	list.h	22;"	d
LIST_HEAD_INIT	list.h	20;"	d
LIST_POISON1	list.h	13;"	d
LIST_POISON2	list.h	14;"	d
ST	list.c	/^struct ST { $/;"	s	file:
ST::ch	list.c	/^    unsigned char ch; $/;"	m	struct:ST	file:	access:public
ST::i_list	list.c	/^    struct list_head  i_list; $/;"	m	struct:ST	typeref:struct:ST::list_head	file:	access:public
ST::this_data	list.c	/^    int 	this_data; $/;"	m	struct:ST	file:	access:public
_LINUX_LIST_H	list.h	2;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n) $/;"	f	signature:(struct hlist_node *n)
__list_add	list.h	/^static inline void __list_add(struct list_head *new, $/;"	f	signature:(struct list_head *new, struct list_head *prev, struct list_head *next)
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next) $/;"	f	signature:(struct list_head * prev, struct list_head * next)
__list_for_each	list.h	162;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list, $/;"	f	signature:(struct list_head *list, struct list_head *head)
a	doublelink.c	/^	int a;$/;"	m	struct:test_kernel_list	file:	access:public
ch	list.c	/^    unsigned char ch; $/;"	m	struct:ST	file:	access:public
container_of	list.h	6;"	d
first	list.h	/^struct hlist_node *first; $/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node	access:public
func	doublelink.c	/^	void*(*func)(void*);$/;"	m	struct:test_kernel_list	file:	access:public
h_list	doublelink.c	/^	struct list_head h_list;$/;"	m	struct:test_kernel_list	typeref:struct:test_kernel_list::list_head	file:	access:public
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n, $/;"	f	signature:(struct hlist_node *n, struct hlist_node *next)
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n, $/;"	f	signature:(struct hlist_node *n, struct hlist_node *next)
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h) $/;"	f	signature:(struct hlist_node *n, struct hlist_head *h)
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n) $/;"	f	signature:(struct hlist_node *n)
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n) $/;"	f	signature:(struct hlist_node *n)
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h) $/;"	f	signature:(const struct hlist_head *h)
hlist_entry	list.h	277;"	d
hlist_for_each	list.h	279;"	d
hlist_for_each_entry	list.h	287;"	d
hlist_for_each_entry_continue	list.h	293;"	d
hlist_for_each_entry_from	list.h	299;"	d
hlist_for_each_entry_safe	list.h	304;"	d
hlist_for_each_safe	list.h	283;"	d
hlist_head	list.h	/^struct hlist_head { $/;"	s
hlist_head::first	list.h	/^struct hlist_node *first; $/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node	access:public
hlist_node	list.h	/^struct hlist_node { $/;"	s
hlist_node::next	list.h	/^struct hlist_node *next, **pprev; $/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node	access:public
hlist_node::pprev	list.h	/^struct hlist_node *next, **pprev; $/;"	m	struct:hlist_node	typeref:struct:hlist_node::	access:public
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h) $/;"	f	signature:(const struct hlist_node *h)
i_list	list.c	/^    struct list_head  i_list; $/;"	m	struct:ST	typeref:struct:ST::list_head	file:	access:public
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head) $/;"	f	signature:(struct list_head *new, struct list_head *head)
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head) $/;"	f	signature:(struct list_head *new, struct list_head *head)
list_del	list.h	/^static inline void list_del(struct list_head *entry) $/;"	f	signature:(struct list_head *entry)
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry) $/;"	f	signature:(struct list_head *entry)
list_empty	list.h	/^static inline int list_empty(const struct list_head *head) $/;"	f	signature:(const struct list_head *head)
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head) $/;"	f	signature:(const struct list_head *head)
list_entry	list.h	155;"	d
list_for_each	list.h	158;"	d
list_for_each_entry	list.h	173;"	d
list_for_each_entry_continue	list.h	186;"	d
list_for_each_entry_reverse	list.h	178;"	d
list_for_each_entry_safe	list.h	191;"	d
list_for_each_prev	list.h	165;"	d
list_for_each_safe	list.h	169;"	d
list_head	list.h	/^struct list_head { $/;"	s
list_head::next	list.h	/^struct list_head *next, *prev; $/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
list_head::prev	list.h	/^struct list_head *next, *prev; $/;"	m	struct:list_head	typeref:struct:list_head::	access:public
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head) $/;"	f	signature:(struct list_head *list, struct list_head *head)
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list, $/;"	f	signature:(struct list_head *list, struct list_head *head)
list_prepare_entry	list.h	183;"	d
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head) $/;"	f	signature:(struct list_head *list, struct list_head *head)
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list, $/;"	f	signature:(struct list_head *list, struct list_head *head)
main	doublelink.c	/^int main(void)$/;"	f	signature:(void)
main	list.c	/^int main() $/;"	f
name	doublelink.c	/^	char name[20];$/;"	m	struct:test_kernel_list	file:	access:public
next	list.h	/^struct hlist_node *next, **pprev; $/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node	access:public
next	list.h	/^struct list_head *next, *prev; $/;"	m	struct:list_head	typeref:struct:list_head::list_head	access:public
offsetof	list.h	4;"	d
pprev	list.h	/^struct hlist_node *next, **pprev; $/;"	m	struct:hlist_node	typeref:struct:hlist_node::	access:public
prefetch	list.h	/^static inline void prefetch(const void *x) {;} $/;"	f	signature:(const void *x)
prefetchw	list.h	/^static inline void prefetchw(const void *x) {;} $/;"	f	signature:(const void *x)
prev	list.h	/^struct list_head *next, *prev; $/;"	m	struct:list_head	typeref:struct:list_head::	access:public
st	list.c	/^} *st; $/;"	v	typeref:struct:ST
test_kernel_list	doublelink.c	/^struct test_kernel_list{$/;"	s	file:
test_kernel_list::a	doublelink.c	/^	int a;$/;"	m	struct:test_kernel_list	file:	access:public
test_kernel_list::func	doublelink.c	/^	void*(*func)(void*);$/;"	m	struct:test_kernel_list	file:	access:public
test_kernel_list::h_list	doublelink.c	/^	struct list_head h_list;$/;"	m	struct:test_kernel_list	typeref:struct:test_kernel_list::list_head	file:	access:public
test_kernel_list::name	doublelink.c	/^	char name[20];$/;"	m	struct:test_kernel_list	file:	access:public
this_data	list.c	/^    int 	this_data; $/;"	m	struct:ST	file:	access:public
